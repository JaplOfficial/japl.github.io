<!DOCTYPE html>
<html>
	<head>
		<title> CSES | Counting Rooms Solution </title>

		<meta charset= "UTF-8" />
		<meta name= "description" content= "Detailed solution and explanation for the CSES Counting Rooms problem with algorithm visualization" />
		<meta name= "keywords" content= "cses ,cses counting rooms solution,counting  rooms,cses solutions, cses problem set solutions, cses graph solutions" />
		<meta name= "author" content= "japl" />
		<meta name= "viewport" content= "width=device-width, initial-scale=1.0" />

		<link rel="icon" href="./images/logo/icon.png" />
		<script>
  			window.dataLayer = window.dataLayer || [];
  			function gtag(){dataLayer.push(arguments);}
  			gtag('js', new Date());

  			gtag('config', 'G-WE3QS3T7XX');
		</script>
		
		
		<style>
			html{
				scroll-behavior: smooth;
				overflow-x     : hidden;
			}

			body{
				margin               : 0;
				padding              : 0;
				background-color     : #474F59;
				color: #D9C0A3;
			}

			h1, h2, h3, h4, h5, h6{
			  margin: 10% 0%;
				font-family: Arial, Helvetica, sans-serif;
				color      : #A65E4E;
			}

			p{
				color: #D9C0A3;
			}

			a, a:link, a:visited, a:hover, a:active{
				text-decoration: none;
				color          : #BF8969;
			}

			body #navbar nav ul{
				list-style-type : none;
				margin          : 0;
				padding         : 0;
				overflow        : hidden;
				background-color: #8B7B78;
				box-shadow      : 0px 4px 69px black;
			}

			body #navbar nav ul li{
				float: left;
			}

			body #navbar nav ul li a{
				display        : block;
				text-align     : center;
				padding        : 16px;
				text-decoration: none;
				color          : #474F59;
			}

			body #navbar nav ul li a:hover{
				color          : #D9C0A3;
				text-decoration: underline;
			}

			body #navbar nav ul li a.active{
				background-color: #474F59;
				color           : #8B7B78;
			}

			body #navbar nav ul li a.active:hover{
				color: #D9C0A3;
			}

			body #conteudo{
				margin: 4% 30%;
			}
			#grid {
				letter-spacing: 120px;
			}
		</style>
	</head>

	<body>
		<div id= "navbar">
			<nav>
				<ul>
					<li><a class= "active" href="../../../index.htm">[ home ]</a></li>
					<li><a class= "" href="../../../archives.htm">[ archives ]</a></li>
				</ul>
			</nav>
		</div>

		<div id= "conteudo">
			<h1>Counting Rooms Solution</h1>
			<p style="color:grey ; font-size:20px ; font-family: Arial, Helvetica, sans-serif;">14 December 2020</p>
			<p style="font-family: Arial, Helvetica, sans-serif; color      : #A65E4E; font-size:30px;">Statement</p>
			<p style="font-size:25px ;  text-align: justify">
				( The original statement can be found <a href="https://cses.fi/problemset/task/1192" target="_blank">here</a> )<br>
				You are given a map of a building, and your task is to count the number of its rooms. The size of the map is n×m squares,
				and each square is either floor or wall. You can walk left, right, up, and down through the floor squares.
				<br><br>
				<b style="font-family: Arial, Helvetica, sans-serif; color      : #A65E4E;">Input</b>
				<br>
				The first input line has two integers n and m: the height and width of the map.

				Then there are n lines of m characters describing the map. Each character is either . (floor) or # (wall).

				<br><br>
				<b style="font-family: Arial, Helvetica, sans-serif; color      : #A65E4E";>Output</b>
				<br>

				Print one integer: the number of rooms.

				<br><br>
				<b style="font-family: Arial, Helvetica, sans-serif; color      : #A65E4E;">Constraints</b>
				<br>
				1 ≤ n, m ≤ 1000<br>
				Time limit : 1.00s<br>
				Memory limit : 512MB<br>
				<br><br>
				<b style="font-family: Arial, Helvetica, sans-serif; color      : #A65E4E;">Example</b>
				<br><br>

				Input : <br>
				<a>5 8</a><br>
				<a>
				#&nbsp;#&nbsp;#&nbsp;#&nbsp;#&nbsp;#&nbsp;#&nbsp;#<br>
				#&nbsp;.&nbsp;&nbsp;.&nbsp;&nbsp;#&nbsp;.&nbsp;&nbsp;.&nbsp;&nbsp;.&nbsp;&nbsp;#<br>
				#&nbsp;#&nbsp;#&nbsp;#&nbsp;.&nbsp;&nbsp;#&nbsp;.&nbsp;&nbsp;#<br>
				#&nbsp;.&nbsp;&nbsp;.&nbsp;&nbsp;#&nbsp;.&nbsp;&nbsp;.&nbsp;&nbsp;.&nbsp;&nbsp;#<br>
				#&nbsp;#&nbsp;#&nbsp;#&nbsp;#&nbsp;#&nbsp;#&nbsp;#<br><br>
				</a>

				Output : <br>
				<a>3</a><br><br>
				<p style="font-family: Arial, Helvetica, sans-serif; color      : #A65E4E; font-size:30px;">Solution</p>


				<p style="font-size:25px ;  text-align: justify">
					The problem asks us to calculate the number of rooms on the map, in other words, to calculate the number of groups consisting
					of connected dots. One way to solve this problem is to consider the given grid as a graph where the floor characters represent
					the nodes and the vertical/horizontal adjacencies represent the edges. In this way, we transform this problem into a classical
					"connected component counting" problem that can be solved with some kind of graph search algorithm, such as depth-first search
					, breadth-first search or even floodfill.
				</p>

				<p style="font-size:25px ;  text-align: justify">
					The following code shows a recursive depth-first search solution that uses a boolean two-dimensional array to keep track
					of the visited rooms. When the algorithm finds an unvisited room cell, it increments the answer by one and it propagates
					recursively through its neighbors and marks them as visited to avoid recounting the same room several times.
				</p>
				<br><br>


				<a style="color: #D9C0A3;">
				<pre style='color:#D9C0A3;background:#323840ff; border-radius:15px;font-size:20px;'><br><span style='color:#A65E4E; '>#</span><span style='color:#A65E4E; '>include </span><span style='color:#ff9955ff; '>&lt;</span><span style='color:#D9C0A3; '>bits/stdc++.h</span><span style='color:#ff9955ff; '>></span>
<span style='color:#ff9955ff; font-weight:bold; '>using</span> <span style='color:#ff9955ff; font-weight:bold; '>namespace</span> <span style='color:#D9C0A3; '>std</span><span style='color:#BF8969; '>;</span>

<span style='color:#ff9955ff; font-weight:bold; '>int</span> neighborX<span style='color:#BF8969; '>[</span><span style='color:#D9C0A3; '>4</span><span style='color:#BF8969; '>]</span> <span style='color:#BF8969; '>=</span> <span style='color:#BF8969; '>{</span><span style='color:#D9C0A3; '>0</span><span style='color:#BF8969; '>,</span> <span style='color:#D9C0A3; '>0</span><span style='color:#BF8969; '>,</span> <span style='color:#D9C0A3; '>1</span><span style='color:#BF8969; '>,</span> <span style='color:#BF8969; '>-</span><span style='color:#D9C0A3; '>1</span><span style='color:#BF8969; '>}</span><span style='color:#BF8969; '>;</span>
<span style='color:#ff9955ff; font-weight:bold; '>int</span> neighborY<span style='color:#BF8969; '>[</span><span style='color:#D9C0A3; '>4</span><span style='color:#BF8969; '>]</span> <span style='color:#BF8969; '>=</span> <span style='color:#BF8969; '>{</span><span style='color:#D9C0A3; '>1</span><span style='color:#BF8969; '>,</span> <span style='color:#BF8969; '>-</span><span style='color:#D9C0A3; '>1</span><span style='color:#BF8969; '>,</span> <span style='color:#D9C0A3; '>0</span><span style='color:#BF8969; '>,</span> <span style='color:#D9C0A3; '>0</span><span style='color:#BF8969; '>}</span><span style='color:#BF8969; '>;</span>

<span style='color:#ff9955ff; font-weight:bold; '>int</span> n<span style='color:#BF8969; '>,</span> m<span style='color:#BF8969; '>,</span> answer <span style='color:#BF8969; '>=</span> <span style='color:#D9C0A3; '>0</span><span style='color:#BF8969; '>;</span>
<span style='color:#ff9955ff; font-weight:bold; '>int</span> vis<span style='color:#BF8969; '>[</span><span style='color:#D9C0A3; '>1010</span><span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>[</span><span style='color:#D9C0A3; '>1010</span><span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>;</span>
<span style='color:#ff9955ff; font-weight:bold; '>char</span> grid<span style='color:#BF8969; '>[</span><span style='color:#D9C0A3; '>1010</span><span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>[</span><span style='color:#D9C0A3; '>1010</span><span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>;</span>

<span style='color:#ff9955ff; font-weight:bold; '>bool</span> isValid <span style='color:#BF8969; '>(</span><span style='color:#ff9955ff; font-weight:bold; '>int</span> y<span style='color:#BF8969; '>,</span> <span style='color:#ff9955ff; font-weight:bold; '>int</span> x<span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
  <span style='color:#ff9955ff; font-weight:bold; '>if</span> <span style='color:#BF8969; '>(</span>y <span style='color:#BF8969; '>&lt;</span> <span style='color:#D9C0A3; '>0</span><span style='color:#BF8969; '>)</span> <span style='color:#ff9955ff; font-weight:bold; '>return</span> <span style='color:#ff9955ff; font-weight:bold; '>false</span><span style='color:#BF8969; '>;</span>
  <span style='color:#ff9955ff; font-weight:bold; '>if</span> <span style='color:#BF8969; '>(</span>x <span style='color:#BF8969; '>&lt;</span> <span style='color:#D9C0A3; '>0</span><span style='color:#BF8969; '>)</span> <span style='color:#ff9955ff; font-weight:bold; '>return</span> <span style='color:#ff9955ff; font-weight:bold; '>false</span><span style='color:#BF8969; '>;</span>
  <span style='color:#ff9955ff; font-weight:bold; '>if</span> <span style='color:#BF8969; '>(</span>y <span style='color:#BF8969; '>></span><span style='color:#BF8969; '>=</span> n<span style='color:#BF8969; '>)</span> <span style='color:#ff9955ff; font-weight:bold; '>return</span> <span style='color:#ff9955ff; font-weight:bold; '>false</span><span style='color:#BF8969; '>;</span>
  <span style='color:#ff9955ff; font-weight:bold; '>if</span> <span style='color:#BF8969; '>(</span>x <span style='color:#BF8969; '>></span><span style='color:#BF8969; '>=</span> m<span style='color:#BF8969; '>)</span> <span style='color:#ff9955ff; font-weight:bold; '>return</span> <span style='color:#ff9955ff; font-weight:bold; '>false</span><span style='color:#BF8969; '>;</span>
  <span style='color:#ff9955ff; font-weight:bold; '>if</span> <span style='color:#BF8969; '>(</span>grid<span style='color:#BF8969; '>[</span>y<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>[</span>x<span style='color:#BF8969; '>]</span> <span style='color:#BF8969; '>=</span><span style='color:#BF8969; '>=</span> <span style='color:#A65E4E; '>'#'</span><span style='color:#BF8969; '>)</span> <span style='color:#ff9955ff; font-weight:bold; '>return</span> <span style='color:#ff9955ff; font-weight:bold; '>false</span><span style='color:#BF8969; '>;</span>
  <span style='color:#ff9955ff; font-weight:bold; '>return</span> <span style='color:#ff9955ff; font-weight:bold; '>true</span><span style='color:#BF8969; '>;</span>
<span style='color:#BF8969; '>}</span>

<span style='color:#ff9955ff; font-weight:bold; '>void</span> DFS <span style='color:#BF8969; '>(</span><span style='color:#ff9955ff; font-weight:bold; '>int</span> y<span style='color:#BF8969; '>,</span> <span style='color:#ff9955ff; font-weight:bold; '>int</span> x<span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
  vis<span style='color:#BF8969; '>[</span>y<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>[</span>x<span style='color:#BF8969; '>]</span> <span style='color:#BF8969; '>=</span> <span style='color:#D9C0A3; '>1</span><span style='color:#BF8969; '>;</span>
  <span style='color:#ff9955ff; font-weight:bold; '>for</span> <span style='color:#BF8969; '>(</span><span style='color:#ff9955ff; font-weight:bold; '>int</span> i <span style='color:#BF8969; '>=</span> <span style='color:#D9C0A3; '>0</span> <span style='color:#BF8969; '>;</span> i <span style='color:#BF8969; '>&lt;</span> <span style='color:#D9C0A3; '>4</span> <span style='color:#BF8969; '>;</span> i<span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
    <span style='color:#ff9955ff; font-weight:bold; '>int</span> newX <span style='color:#BF8969; '>=</span> x <span style='color:#BF8969; '>+</span> neighborX<span style='color:#BF8969; '>[</span>i<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>;</span>
    <span style='color:#ff9955ff; font-weight:bold; '>int</span> newY <span style='color:#BF8969; '>=</span> y <span style='color:#BF8969; '>+</span> neighborY<span style='color:#BF8969; '>[</span>i<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>;</span>
    <span style='color:#ff9955ff; font-weight:bold; '>if</span> <span style='color:#BF8969; '>(</span>isValid<span style='color:#BF8969; '>(</span>newY<span style='color:#BF8969; '>,</span> newX<span style='color:#BF8969; '>)</span><span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
      <span style='color:#ff9955ff; font-weight:bold; '>if</span> <span style='color:#BF8969; '>(</span><span style='color:#BF8969; '>!</span>vis<span style='color:#BF8969; '>[</span>newY<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>[</span>newX<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
        DFS<span style='color:#BF8969; '>(</span>newY<span style='color:#BF8969; '>,</span> newX<span style='color:#BF8969; '>)</span><span style='color:#BF8969; '>;</span>
      <span style='color:#BF8969; '>}</span>
    <span style='color:#BF8969; '>}</span>
  <span style='color:#BF8969; '>}</span>
<span style='color:#BF8969; '>}</span>

<span style='color:#ff9955ff; font-weight:bold; '>int</span> <span style='color:#D9C0A3; '>main</span><span style='color:#BF8969; '>(</span><span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
    <span style='color:#BF8969; '>cin</span> <span style='color:#BF8969; '>></span><span style='color:#BF8969; '>></span> n <span style='color:#BF8969; '>></span><span style='color:#BF8969; '>></span> m<span style='color:#BF8969; '>;</span>
    <span style='color:#ff9955ff; font-weight:bold; '>for</span> <span style='color:#BF8969; '>(</span><span style='color:#ff9955ff; font-weight:bold; '>int</span> i <span style='color:#BF8969; '>=</span> <span style='color:#D9C0A3; '>0</span> <span style='color:#BF8969; '>;</span> i <span style='color:#BF8969; '>&lt;</span> n <span style='color:#BF8969; '>;</span> i<span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
      <span style='color:#ff9955ff; font-weight:bold; '>for</span> <span style='color:#BF8969; '>(</span><span style='color:#ff9955ff; font-weight:bold; '>int</span> j <span style='color:#BF8969; '>=</span> <span style='color:#D9C0A3; '>0</span> <span style='color:#BF8969; '>;</span> j <span style='color:#BF8969; '>&lt;</span> m <span style='color:#BF8969; '>;</span> j<span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
        <span style='color:#BF8969; '>cin</span> <span style='color:#BF8969; '>></span><span style='color:#BF8969; '>></span> grid<span style='color:#BF8969; '>[</span>i<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>[</span>j<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>;</span>
        vis<span style='color:#BF8969; '>[</span>i<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>[</span>j<span style='color:#BF8969; '>]</span> <span style='color:#BF8969; '>=</span> <span style='color:#D9C0A3; '>0</span><span style='color:#BF8969; '>;</span>
      <span style='color:#BF8969; '>}</span>
    <span style='color:#BF8969; '>}</span>
    <span style='color:#ff9955ff; font-weight:bold; '>for</span> <span style='color:#BF8969; '>(</span><span style='color:#ff9955ff; font-weight:bold; '>int</span> i <span style='color:#BF8969; '>=</span> <span style='color:#D9C0A3; '>0</span> <span style='color:#BF8969; '>;</span> i <span style='color:#BF8969; '>&lt;</span> n <span style='color:#BF8969; '>;</span> i<span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
      <span style='color:#ff9955ff; font-weight:bold; '>for</span> <span style='color:#BF8969; '>(</span><span style='color:#ff9955ff; font-weight:bold; '>int</span> j <span style='color:#BF8969; '>=</span> <span style='color:#D9C0A3; '>0</span> <span style='color:#BF8969; '>;</span> j <span style='color:#BF8969; '>&lt;</span> m <span style='color:#BF8969; '>;</span> j<span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
        <span style='color:#ff9955ff; font-weight:bold; '>if</span> <span style='color:#BF8969; '>(</span>grid<span style='color:#BF8969; '>[</span>i<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>[</span>j<span style='color:#BF8969; '>]</span> <span style='color:#BF8969; '>=</span><span style='color:#BF8969; '>=</span> <span style='color:#A65E4E; '>'.'</span> <span style='color:#BF8969; '>&amp;</span><span style='color:#BF8969; '>&amp;</span> <span style='color:#BF8969; '>!</span>vis<span style='color:#BF8969; '>[</span>i<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>[</span>j<span style='color:#BF8969; '>]</span><span style='color:#BF8969; '>)</span> <span style='color:#BF8969; '>{</span>
          DFS<span style='color:#BF8969; '>(</span>i<span style='color:#BF8969; '>,</span> j<span style='color:#BF8969; '>)</span><span style='color:#BF8969; '>;</span>
          answer<span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>+</span><span style='color:#BF8969; '>;</span>
        <span style='color:#BF8969; '>}</span>
      <span style='color:#BF8969; '>}</span>
    <span style='color:#BF8969; '>}</span>
    <span style='color:#BF8969; '>cout</span> <span style='color:#BF8969; '>&lt;</span><span style='color:#BF8969; '>&lt;</span> answer <span style='color:#BF8969; '>&lt;</span><span style='color:#BF8969; '>&lt;</span> <span style='color:#BF8969; '>endl</span><span style='color:#BF8969; '>;</span>
    <span style='color:#ff9955ff; font-weight:bold; '>return</span> <span style='color:#D9C0A3; '>0</span><span style='color:#BF8969; '>;</span>
<span style='color:#BF8969; '>}<br></span>
</pre>
</a>
<!--Created using ToHtml.com on 2020-12-06 15:19:54 UTC -->
				</p>
				<br>
				<p style="font-size:25px ;  text-align: justify">
					This algorithm runs in a time and space complexity of O(NxM) allowing it to be a viable solution
					given the inicial constraints . The following animation shows how the algorithm works in the sample input.
				</p>
				<br>

				<img src="images/algo_vizualization.gif" width=100% style="border-radius:15px">

		</div>
	</body>
</html>
